# This GitHub Actions workflow triggers after receiving a Deployment Status event from GH Actions environment. This works
# with providers like Vercel, Heroku and others. This workflow does the following
#
# - Runs after deployment event
# - Uses the environment_url provided in the deployment event
# - Dry run all the checks on Checkly
# - If the dry run passes, deploy the checks.
#
#  You can of course trigger the Checkly CLI in other workflows or steps inside your GH Action configuration.
name: 'checkly'
on: push

# Set the necessary credentials and export variables we can use to instrument our test run. Use the ENVIRONMENT_URL
# to run your checks against staging, preview or production.
env:
  CHECKLY_API_KEY: ${{ secrets.CHECKLY_API_KEY }}
  CHECKLY_ACCOUNT_ID: ${{ secrets.CHECKLY_ACCOUNT_ID }}
  ENVIRONMENT_URL: https://illustrious-bubblegum-fd876c.netlify.app/
jobs:
  test-e2e:
    name: Test E2E on Checkly
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Set branch name # this is workaround to get the branch name.
        run: echo "CHECKLY_TEST_REPO_BRANCH=$(git show -s --pretty=%D HEAD | tr -s ',' '\n' | sed 's/^ //' | grep -e 'origin/' | head -1 | sed 's/\origin\///g')" >> $GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: '16.19.1'
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        id: preview
        with:
          publish-dir: "./site"
          production-branch: master
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
          enable-github-deployment: true
          github-deployment-environment: Production
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1
      - name: Install dependencies
        run: npm ci
      - name: Run checks # run the checks passing in the ENVIRONMENT_URL and recording a test session.
        id: run-checks
        run: npx checkly -v && npx checkly test -e ENVIRONMENT_URL=${{ steps.preview.outputs.deploy-url }} --reporter=github --record
      - name: Create summary # export the markdown report to the job summary.
        id: create-summary
        run: cat checkly-github-report.md > $GITHUB_STEP_SUMMARY
      - name: Deploy checks # if the test run was successful and we are on Production, deploy the checks
        id: deploy-checks
        if: steps.run-checks.outcome == 'success'
        run: npx checkly deploy --force